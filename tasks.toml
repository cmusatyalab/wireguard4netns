# SPDX-FileCopyrightText: 2022 Carnegie Mellon University
# SPDX-License-Identifier: 0BSD

[tool.poe.tasks]
_check_submodule = {script = "build:check_submodule"}
_clean_dist = {script = "build:clean_dist"}

[tool.poe.tasks.version]
help = "Show current version"
cmd = "poetry run tbump current-version"

[tool.poe.tasks.build-sdist]
help = "Cleanup dist and build sdist"
sequence = [
    {ref = "_check_submodule"},
    {ref = "_clean_dist"},
    {cmd = "poetry build --format=sdist"},
]

[tool.poe.tasks.build-wheels]
help = "Build binary wheels in a manylinux docker container"
script = "build:wheels"

[tool.poe.tasks.build]
help = "Build sdist and wheels"
sequence = [
    "build-sdist",
    "build-wheels",
]

[tool.poe.tasks.check]
help = "Run pre-commit and unit tests"
sequence = [
    "poetry run pre-commit run -a",
    "poetry run pytest",
]
default_item_type = "cmd"

[tool.poe.tasks.update-dependencies]
help = "Update dependencies"
sequence = [
    {cmd = "poetry update"},
    {cmd = "poetry run pre-commit autoupdate"},
    {ref = "check"},
    {cmd = "git commit --no-verify -m 'Update dependencies' poetry.lock .pre-commit-config.yaml"},
]

[tool.poe.tasks.tag-release]
help = "Bump version, build, and create a release tag"
cmd = "poetry run tbump --no-push ${version}"
args = [{name = "version", positional = true, required=true}]

[tool.poe.tasks._ensure_version]
shell = "test $(poetry run tbump current-version) = ${version}"
args = [{name = "version", positional = true, required=true}]

[tool.poe.tasks.publish]
help = "Publish release to pypi and git, bump to post-release version"
sequence = [
    {ref = "_ensure_version ${version}"},
    {cmd = "poetry publish"},
    {cmd = "poetry run tbump --non-interactive --only-patch ${version}.post.dev0"},
    {cmd = "git add --update"},
    {cmd = "git commit --no-verify --message 'Bumping to ${version}.post.dev0'"},
    {cmd = "git push --atomic origin main v${version}"},
]
args = [{name = "version", positional = true, required = true}]

[tool.poe.tasks.release]
help = "Update to release version, build, tag, and publish"
sequence = [
    "tag-release ${version}",
    "publish ${version}"
]
args = [{name = "version", positional = true, required = true}]
